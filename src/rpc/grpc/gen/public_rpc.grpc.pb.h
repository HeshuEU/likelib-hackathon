// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: public_rpc.proto
#ifndef GRPC_public_5frpc_2eproto__INCLUDED
#define GRPC_public_5frpc_2eproto__INCLUDED

#include "public_rpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace Likelib {

class Node final {
 public:
  static constexpr char const* service_full_name() {
    return "Likelib.Node";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status balance(::grpc::ClientContext* context, const ::Likelib::Address& request, ::Likelib::Money* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Money>> Asyncbalance(::grpc::ClientContext* context, const ::Likelib::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Money>>(AsyncbalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Money>> PrepareAsyncbalance(::grpc::ClientContext* context, const ::Likelib::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Money>>(PrepareAsyncbalanceRaw(context, request, cq));
    }
    virtual ::grpc::Status transaction(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::Likelib::Hash* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Hash>> Asynctransaction(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Hash>>(AsynctransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Hash>> PrepareAsynctransaction(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Hash>>(PrepareAsynctransactionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void balance(::grpc::ClientContext* context, const ::Likelib::Address* request, ::Likelib::Money* response, std::function<void(::grpc::Status)>) = 0;
      virtual void balance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Likelib::Money* response, std::function<void(::grpc::Status)>) = 0;
      virtual void balance(::grpc::ClientContext* context, const ::Likelib::Address* request, ::Likelib::Money* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void balance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Likelib::Money* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void transaction(::grpc::ClientContext* context, const ::Likelib::Transaction* request, ::Likelib::Hash* response, std::function<void(::grpc::Status)>) = 0;
      virtual void transaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Likelib::Hash* response, std::function<void(::grpc::Status)>) = 0;
      virtual void transaction(::grpc::ClientContext* context, const ::Likelib::Transaction* request, ::Likelib::Hash* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void transaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Likelib::Hash* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Money>* AsyncbalanceRaw(::grpc::ClientContext* context, const ::Likelib::Address& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Money>* PrepareAsyncbalanceRaw(::grpc::ClientContext* context, const ::Likelib::Address& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Hash>* AsynctransactionRaw(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Likelib::Hash>* PrepareAsynctransactionRaw(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status balance(::grpc::ClientContext* context, const ::Likelib::Address& request, ::Likelib::Money* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Likelib::Money>> Asyncbalance(::grpc::ClientContext* context, const ::Likelib::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Likelib::Money>>(AsyncbalanceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Likelib::Money>> PrepareAsyncbalance(::grpc::ClientContext* context, const ::Likelib::Address& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Likelib::Money>>(PrepareAsyncbalanceRaw(context, request, cq));
    }
    ::grpc::Status transaction(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::Likelib::Hash* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Likelib::Hash>> Asynctransaction(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Likelib::Hash>>(AsynctransactionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Likelib::Hash>> PrepareAsynctransaction(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Likelib::Hash>>(PrepareAsynctransactionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void balance(::grpc::ClientContext* context, const ::Likelib::Address* request, ::Likelib::Money* response, std::function<void(::grpc::Status)>) override;
      void balance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Likelib::Money* response, std::function<void(::grpc::Status)>) override;
      void balance(::grpc::ClientContext* context, const ::Likelib::Address* request, ::Likelib::Money* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void balance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Likelib::Money* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void transaction(::grpc::ClientContext* context, const ::Likelib::Transaction* request, ::Likelib::Hash* response, std::function<void(::grpc::Status)>) override;
      void transaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Likelib::Hash* response, std::function<void(::grpc::Status)>) override;
      void transaction(::grpc::ClientContext* context, const ::Likelib::Transaction* request, ::Likelib::Hash* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void transaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Likelib::Hash* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Likelib::Money>* AsyncbalanceRaw(::grpc::ClientContext* context, const ::Likelib::Address& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Likelib::Money>* PrepareAsyncbalanceRaw(::grpc::ClientContext* context, const ::Likelib::Address& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Likelib::Hash>* AsynctransactionRaw(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Likelib::Hash>* PrepareAsynctransactionRaw(::grpc::ClientContext* context, const ::Likelib::Transaction& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_balance_;
    const ::grpc::internal::RpcMethod rpcmethod_transaction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status balance(::grpc::ServerContext* context, const ::Likelib::Address* request, ::Likelib::Money* response);
    virtual ::grpc::Status transaction(::grpc::ServerContext* context, const ::Likelib::Transaction* request, ::Likelib::Hash* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_balance() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status balance(::grpc::ServerContext* /*context*/, const ::Likelib::Address* /*request*/, ::Likelib::Money* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbalance(::grpc::ServerContext* context, ::Likelib::Address* request, ::grpc::ServerAsyncResponseWriter< ::Likelib::Money>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_transaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_transaction() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_transaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transaction(::grpc::ServerContext* /*context*/, const ::Likelib::Transaction* /*request*/, ::Likelib::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransaction(::grpc::ServerContext* context, ::Likelib::Transaction* request, ::grpc::ServerAsyncResponseWriter< ::Likelib::Hash>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_balance<WithAsyncMethod_transaction<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_balance() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Likelib::Address, ::Likelib::Money>(
          [this](::grpc::ServerContext* context,
                 const ::Likelib::Address* request,
                 ::Likelib::Money* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->balance(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_balance(
        ::grpc::experimental::MessageAllocator< ::Likelib::Address, ::Likelib::Money>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Likelib::Address, ::Likelib::Money>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status balance(::grpc::ServerContext* /*context*/, const ::Likelib::Address* /*request*/, ::Likelib::Money* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void balance(::grpc::ServerContext* /*context*/, const ::Likelib::Address* /*request*/, ::Likelib::Money* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_transaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_transaction() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::Likelib::Transaction, ::Likelib::Hash>(
          [this](::grpc::ServerContext* context,
                 const ::Likelib::Transaction* request,
                 ::Likelib::Hash* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->transaction(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_transaction(
        ::grpc::experimental::MessageAllocator< ::Likelib::Transaction, ::Likelib::Hash>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Likelib::Transaction, ::Likelib::Hash>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_transaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transaction(::grpc::ServerContext* /*context*/, const ::Likelib::Transaction* /*request*/, ::Likelib::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void transaction(::grpc::ServerContext* /*context*/, const ::Likelib::Transaction* /*request*/, ::Likelib::Hash* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_balance<ExperimentalWithCallbackMethod_transaction<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_balance() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status balance(::grpc::ServerContext* /*context*/, const ::Likelib::Address* /*request*/, ::Likelib::Money* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_transaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_transaction() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_transaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transaction(::grpc::ServerContext* /*context*/, const ::Likelib::Transaction* /*request*/, ::Likelib::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_balance() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status balance(::grpc::ServerContext* /*context*/, const ::Likelib::Address* /*request*/, ::Likelib::Money* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbalance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_transaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_transaction() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_transaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transaction(::grpc::ServerContext* /*context*/, const ::Likelib::Transaction* /*request*/, ::Likelib::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requesttransaction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_balance() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->balance(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status balance(::grpc::ServerContext* /*context*/, const ::Likelib::Address* /*request*/, ::Likelib::Money* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void balance(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_transaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_transaction() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->transaction(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_transaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status transaction(::grpc::ServerContext* /*context*/, const ::Likelib::Transaction* /*request*/, ::Likelib::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void transaction(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_balance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_balance() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Likelib::Address, ::Likelib::Money>(std::bind(&WithStreamedUnaryMethod_balance<BaseClass>::Streamedbalance, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_balance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status balance(::grpc::ServerContext* /*context*/, const ::Likelib::Address* /*request*/, ::Likelib::Money* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedbalance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Likelib::Address,::Likelib::Money>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_transaction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_transaction() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Likelib::Transaction, ::Likelib::Hash>(std::bind(&WithStreamedUnaryMethod_transaction<BaseClass>::Streamedtransaction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_transaction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status transaction(::grpc::ServerContext* /*context*/, const ::Likelib::Transaction* /*request*/, ::Likelib::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedtransaction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Likelib::Transaction,::Likelib::Hash>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_balance<WithStreamedUnaryMethod_transaction<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_balance<WithStreamedUnaryMethod_transaction<Service > > StreamedService;
};

}  // namespace Likelib


#endif  // GRPC_public_5frpc_2eproto__INCLUDED
