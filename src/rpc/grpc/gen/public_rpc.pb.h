// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_public_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_public_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_public_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_public_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_public_5frpc_2eproto;
namespace Likelib {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Hash;
class HashDefaultTypeInternal;
extern HashDefaultTypeInternal _Hash_default_instance_;
class Money;
class MoneyDefaultTypeInternal;
extern MoneyDefaultTypeInternal _Money_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace Likelib
PROTOBUF_NAMESPACE_OPEN
template<> ::Likelib::Address* Arena::CreateMaybeMessage<::Likelib::Address>(Arena*);
template<> ::Likelib::Hash* Arena::CreateMaybeMessage<::Likelib::Hash>(Arena*);
template<> ::Likelib::Money* Arena::CreateMaybeMessage<::Likelib::Money>(Arena*);
template<> ::Likelib::Transaction* Arena::CreateMaybeMessage<::Likelib::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Likelib {

// ===================================================================

class Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Likelib.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Transaction* other);
  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Likelib.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_5frpc_2eproto);
    return ::descriptor_table_public_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Likelib.Money amount = 1;
  bool has_amount() const;
  void clear_amount();
  static const int kAmountFieldNumber = 1;
  const ::Likelib::Money& amount() const;
  ::Likelib::Money* release_amount();
  ::Likelib::Money* mutable_amount();
  void set_allocated_amount(::Likelib::Money* amount);

  // .Likelib.Address from_address = 2;
  bool has_from_address() const;
  void clear_from_address();
  static const int kFromAddressFieldNumber = 2;
  const ::Likelib::Address& from_address() const;
  ::Likelib::Address* release_from_address();
  ::Likelib::Address* mutable_from_address();
  void set_allocated_from_address(::Likelib::Address* from_address);

  // .Likelib.Address to_address = 3;
  bool has_to_address() const;
  void clear_to_address();
  static const int kToAddressFieldNumber = 3;
  const ::Likelib::Address& to_address() const;
  ::Likelib::Address* release_to_address();
  ::Likelib::Address* mutable_to_address();
  void set_allocated_to_address(::Likelib::Address* to_address);

  // @@protoc_insertion_point(class_scope:Likelib.Transaction)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Likelib::Money* amount_;
  ::Likelib::Address* from_address_;
  ::Likelib::Address* to_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_5frpc_2eproto;
};
// -------------------------------------------------------------------

class Address :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Likelib.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Likelib.Address";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_5frpc_2eproto);
    return ::descriptor_table_public_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 1;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // @@protoc_insertion_point(class_scope:Likelib.Address)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_5frpc_2eproto;
};
// -------------------------------------------------------------------

class Hash :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Likelib.Hash) */ {
 public:
  Hash();
  virtual ~Hash();

  Hash(const Hash& from);
  Hash(Hash&& from) noexcept
    : Hash() {
    *this = ::std::move(from);
  }

  inline Hash& operator=(const Hash& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hash& operator=(Hash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hash* internal_default_instance() {
    return reinterpret_cast<const Hash*>(
               &_Hash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Hash* other);
  friend void swap(Hash& a, Hash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hash* New() const final {
    return CreateMaybeMessage<Hash>(nullptr);
  }

  Hash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hash& from);
  void MergeFrom(const Hash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Likelib.Hash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_5frpc_2eproto);
    return ::descriptor_table_public_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hash_string = 1;
  void clear_hash_string();
  static const int kHashStringFieldNumber = 1;
  const std::string& hash_string() const;
  void set_hash_string(const std::string& value);
  void set_hash_string(std::string&& value);
  void set_hash_string(const char* value);
  void set_hash_string(const char* value, size_t size);
  std::string* mutable_hash_string();
  std::string* release_hash_string();
  void set_allocated_hash_string(std::string* hash_string);

  // @@protoc_insertion_point(class_scope:Likelib.Hash)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_string_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_5frpc_2eproto;
};
// -------------------------------------------------------------------

class Money :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Likelib.Money) */ {
 public:
  Money();
  virtual ~Money();

  Money(const Money& from);
  Money(Money&& from) noexcept
    : Money() {
    *this = ::std::move(from);
  }

  inline Money& operator=(const Money& from) {
    CopyFrom(from);
    return *this;
  }
  inline Money& operator=(Money&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Money& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Money* internal_default_instance() {
    return reinterpret_cast<const Money*>(
               &_Money_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Money* other);
  friend void swap(Money& a, Money& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Money* New() const final {
    return CreateMaybeMessage<Money>(nullptr);
  }

  Money* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Money>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Money& from);
  void MergeFrom(const Money& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Money* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Likelib.Money";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_public_5frpc_2eproto);
    return ::descriptor_table_public_5frpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 money = 1;
  void clear_money();
  static const int kMoneyFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:Likelib.Money)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_public_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transaction

// .Likelib.Money amount = 1;
inline bool Transaction::has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline void Transaction::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::Likelib::Money& Transaction::amount() const {
  const ::Likelib::Money* p = amount_;
  // @@protoc_insertion_point(field_get:Likelib.Transaction.amount)
  return p != nullptr ? *p : *reinterpret_cast<const ::Likelib::Money*>(
      &::Likelib::_Money_default_instance_);
}
inline ::Likelib::Money* Transaction::release_amount() {
  // @@protoc_insertion_point(field_release:Likelib.Transaction.amount)
  
  ::Likelib::Money* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::Likelib::Money* Transaction::mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::Likelib::Money>(GetArenaNoVirtual());
    amount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Likelib.Transaction.amount)
  return amount_;
}
inline void Transaction::set_allocated_amount(::Likelib::Money* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:Likelib.Transaction.amount)
}

// .Likelib.Address from_address = 2;
inline bool Transaction::has_from_address() const {
  return this != internal_default_instance() && from_address_ != nullptr;
}
inline void Transaction::clear_from_address() {
  if (GetArenaNoVirtual() == nullptr && from_address_ != nullptr) {
    delete from_address_;
  }
  from_address_ = nullptr;
}
inline const ::Likelib::Address& Transaction::from_address() const {
  const ::Likelib::Address* p = from_address_;
  // @@protoc_insertion_point(field_get:Likelib.Transaction.from_address)
  return p != nullptr ? *p : *reinterpret_cast<const ::Likelib::Address*>(
      &::Likelib::_Address_default_instance_);
}
inline ::Likelib::Address* Transaction::release_from_address() {
  // @@protoc_insertion_point(field_release:Likelib.Transaction.from_address)
  
  ::Likelib::Address* temp = from_address_;
  from_address_ = nullptr;
  return temp;
}
inline ::Likelib::Address* Transaction::mutable_from_address() {
  
  if (from_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::Likelib::Address>(GetArenaNoVirtual());
    from_address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Likelib.Transaction.from_address)
  return from_address_;
}
inline void Transaction::set_allocated_from_address(::Likelib::Address* from_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete from_address_;
  }
  if (from_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_address, submessage_arena);
    }
    
  } else {
    
  }
  from_address_ = from_address;
  // @@protoc_insertion_point(field_set_allocated:Likelib.Transaction.from_address)
}

// .Likelib.Address to_address = 3;
inline bool Transaction::has_to_address() const {
  return this != internal_default_instance() && to_address_ != nullptr;
}
inline void Transaction::clear_to_address() {
  if (GetArenaNoVirtual() == nullptr && to_address_ != nullptr) {
    delete to_address_;
  }
  to_address_ = nullptr;
}
inline const ::Likelib::Address& Transaction::to_address() const {
  const ::Likelib::Address* p = to_address_;
  // @@protoc_insertion_point(field_get:Likelib.Transaction.to_address)
  return p != nullptr ? *p : *reinterpret_cast<const ::Likelib::Address*>(
      &::Likelib::_Address_default_instance_);
}
inline ::Likelib::Address* Transaction::release_to_address() {
  // @@protoc_insertion_point(field_release:Likelib.Transaction.to_address)
  
  ::Likelib::Address* temp = to_address_;
  to_address_ = nullptr;
  return temp;
}
inline ::Likelib::Address* Transaction::mutable_to_address() {
  
  if (to_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::Likelib::Address>(GetArenaNoVirtual());
    to_address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Likelib.Transaction.to_address)
  return to_address_;
}
inline void Transaction::set_allocated_to_address(::Likelib::Address* to_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete to_address_;
  }
  if (to_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to_address, submessage_arena);
    }
    
  } else {
    
  }
  to_address_ = to_address;
  // @@protoc_insertion_point(field_set_allocated:Likelib.Transaction.to_address)
}

// -------------------------------------------------------------------

// Address

// string address = 1;
inline void Address::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Address::address() const {
  // @@protoc_insertion_point(field_get:Likelib.Address.address)
  return address_.GetNoArena();
}
inline void Address::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Likelib.Address.address)
}
inline void Address::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Likelib.Address.address)
}
inline void Address::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Likelib.Address.address)
}
inline void Address::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Likelib.Address.address)
}
inline std::string* Address::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:Likelib.Address.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Address::release_address() {
  // @@protoc_insertion_point(field_release:Likelib.Address.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Address::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:Likelib.Address.address)
}

// -------------------------------------------------------------------

// Hash

// string hash_string = 1;
inline void Hash::clear_hash_string() {
  hash_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Hash::hash_string() const {
  // @@protoc_insertion_point(field_get:Likelib.Hash.hash_string)
  return hash_string_.GetNoArena();
}
inline void Hash::set_hash_string(const std::string& value) {
  
  hash_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Likelib.Hash.hash_string)
}
inline void Hash::set_hash_string(std::string&& value) {
  
  hash_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Likelib.Hash.hash_string)
}
inline void Hash::set_hash_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Likelib.Hash.hash_string)
}
inline void Hash::set_hash_string(const char* value, size_t size) {
  
  hash_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Likelib.Hash.hash_string)
}
inline std::string* Hash::mutable_hash_string() {
  
  // @@protoc_insertion_point(field_mutable:Likelib.Hash.hash_string)
  return hash_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Hash::release_hash_string() {
  // @@protoc_insertion_point(field_release:Likelib.Hash.hash_string)
  
  return hash_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Hash::set_allocated_hash_string(std::string* hash_string) {
  if (hash_string != nullptr) {
    
  } else {
    
  }
  hash_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash_string);
  // @@protoc_insertion_point(field_set_allocated:Likelib.Hash.hash_string)
}

// -------------------------------------------------------------------

// Money

// uint64 money = 1;
inline void Money::clear_money() {
  money_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Money::money() const {
  // @@protoc_insertion_point(field_get:Likelib.Money.money)
  return money_;
}
inline void Money::set_money(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:Likelib.Money.money)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Likelib

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_public_5frpc_2eproto
