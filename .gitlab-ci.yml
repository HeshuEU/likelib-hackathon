# test for ci capabilities
image: docker:19.03.1

services:
  - docker:19.03.1-dind

stages:
  - stage_1
  - stage_2

variables:
  ENV_HASH: "temp"

before_script:
  - echo "Started before script"
  - echo "get hash of prepare build"
  - echo "pull image by hash "
  - echo "if image was not found make image(prepare env) with tags hash and tag likelib_environment"
  - echo "push image to registry"
  - echo "variable {ENV_HASH}"
  - ENV_HASH="befor_script"

job1:
  stage: stage_1
  tags:
    - docker
  script:
    - echo "Started job 1"
    - echo "variable {ENV_HASH}"
    - ENV_HASH="job_1"

job2:
  stage: stage_2
  tags:
    - docker
  script:
    - echo "Started job 2"
    - echo "variable {ENV_HASH}"
    - ENV_HASH="job_2"


#build-code:
#  stage: build
#  tags:
#    - docker
#  script:
#    - apt-get update
#    - apt-get install -y software-properties-common
#    - apt-get update -y
#    - apt-get install -y apt-utils
#    - apt-get dist-upgrade -y
#    - PROJECT_SOURCE_DIR=$(pwd)
#    - mkdir -p ${INSTALL_DIR}
#    - cd doc || exit 1
#    - chmod 777 prepare_build.sh && ./prepare_build.sh
#    - mkdir -p ${PROJECT_BUILD_DIR} && cd ${PROJECT_BUILD_DIR} || exit 1
#    - cmake ${PROJECT_SOURCE_DIR} -DCMAKE_TOOLCHAIN_FILE=${INSTALL_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake
#    - make -j$(nproc)
#  artifacts:
#    paths:
#      - ${PROJECT_BUILD_DIR}
#
#run-quality-test:
#  stage: quality
#  tags:
#    - docker
#  script:
#    - ls
#    - ls ${PROJECT_BUILD_DIR}

#    # update system
#    - RUN apt-get update && \
#      apt-get install -y software-properties-common && \
#      apt-get update -y && \
#      apt-get install -y apt-utils && \
#      apt-get dist-upgrade -y
#
#    - cd ${INSTALL_DIR}
#
#    # set up environment for building project
#    COPY doc/prepare_build.sh ${INSTALL_DIR}
#    RUN ./prepare_build.sh
#
#    # build project
#    ENV PROJECT_SOURCE_DIR /project
#    ENV PROJECT_BUILD_DIR /build
#    COPY . ${PROJECT_SOURCE_DIR}
#    WORKDIR ${PROJECT_BUILD_DIR}
#    RUN cmake ${PROJECT_SOURCE_DIR} -DCMAKE_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake && \
#    make -j$(nproc)
#
#
#    - docker build -f build.Dockerfile -t likelib2_build .
#




#Code quality:
#  stage: quality
#  tags:
#    - custom-tag
#  allow_failure: true
#  script:
#    - docker build --no-cache -f code-quality.Dockerfile -t likelib2_code_quality .
#
#Unit tests:
#  stage: test
#  tags:
#    - custom-tag
#  script:
#    - docker build --no-cache -f unit_test.Dockerfile -t likelib2_unit_test .
#
#Integration tests:
#  stage: test
#  tags:
#    - custom-tag
#  script:
#    - docker build --no-cache -f integration_test.Dockerfile -t likelib2_integration_test .
