stages:
  - build
  - quality
  - test

Build:
  stage: build
  image: heshuby/prepare_build:2019-12-18
  tags:
    - docker
  script: 
    - export INSTALL_DIR="/opt"
    - export PROJECT_SOURCE_DIR=${PWD}
    - export PROJECT_BUILD_DIR="./build"
    - mkdir ${PROJECT_BUILD_DIR}

    - cd ${PROJECT_BUILD_DIR}
    - cmake ${PROJECT_SOURCE_DIR} -DCMAKE_TOOLCHAIN_FILE=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake
    - make -j$(nproc)
    - |
      echo -e "\033[34;1;42m ========================================================================= \n \
==                          Finish building                            == \n \
========================================================================= \033[0m"

  artifacts:
    paths:
    - build
    expire_in: 1 week

    
Code quality:
  stage: quality
  image: heshuby/prepare_build:2019-12-18
  tags:
    - docker
  allow_failure: true
  script:
    - apt update > /dev/null && apt install -y clang-tidy > /dev/null
    - cd ./src
    - export INCLUDE="-I/opt/vcpkg/installed/x64-linux/include -I${PWD} -I../build/grpc/gen -std=c++17"
    - echo ========================================================================= > /dev/null
    - echo ==                          Start code quality                         == > /dev/null
    - echo ========================================================================= > /dev/null
    - clang-tidy node/main.cpp -header-filter=.* -- ${INCLUDE}
    - clang-tidy rpc-client/main.cpp -header-filter=.* -- ${INCLUDE}


Unit tests:
  stage: test
  tags:
    - docker
  cache: {}
  script:
    - echo ========================================================================= > /dev/null
    - echo ==                          Start tests                                == > /dev/null
    - echo ========================================================================= > /dev/null
    - build/test/run_tests --log_level=test_suite --detect_memory_leaks=1 --build_info

Valgrind test:
  stage: test
  tags:
    - docker
  script:
    - apt update > /dev/null && apt install -y valgrind > /dev/null
    - echo ========================================================================= > /dev/null
    - echo ==                          Start memory check                         == > /dev/null
    - echo ========================================================================= > /dev/null
    - valgrind --leak-check=full build/src/node/node && echo -e "\033[37;1;41m        Node check success        \033[0m" || echo -e "\033[31m Node check failed\033[0m"
    - valgrind --leak-check=full build/src/rpc-client/rpc-client && echo -e "\033[37;1;41m        RPC-client check success        \033[0m" || echo -e "\033[31m RPC-client check failed\033[0m"

